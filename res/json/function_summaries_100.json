{
  "functions": [
    {
      "name": "acos",
      "summary": "Return the arccosine of the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value whose arccosine to return."
        }
      ]
    },
    {
      "name": "asin",
      "summary": "Return the arcsine of the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value whose arcsine to return."
        }
      ]
    },
    {
      "name": "atan",
      "summary": "Return the arc-tangent of the parameters.",
      "parameters": [
        {
          "name": "y",
          "summary": "Specify the numerator of the fraction whose arctangent to return."
        },
        {
          "name": "x",
          "summary": "Specify the denominator of the fraction whose arctangent to return."
        },
        {
          "name": "y_over_x",
          "summary": "Specify the fraction whose arctangent to return."
        }
      ]
    },
    {
      "name": "cos",
      "summary": "Return the cosine of the parameter.",
      "parameters": [
        {
          "name": "angle",
          "summary": "Specify the quantity, in radians, of which to return the cosine."
        }
      ]
    },
    {
      "name": "degrees",
      "summary": "Convert a quantity in radians to degrees.",
      "parameters": [
        {
          "name": "radians",
          "summary": "Specify the quantity, in radians, to be converted to degrees."
        }
      ]
    },
    {
      "name": "radians",
      "summary": "Convert a quantity in degrees to radians.",
      "parameters": [
        {
          "name": "degrees",
          "summary": "Specify the quantity, in degrees, to be converted to radians."
        }
      ]
    },
    {
      "name": "sin",
      "summary": "Return the sine of the parameter.",
      "parameters": [
        {
          "name": "angle",
          "summary": "Specify the quantity, in radians, of which to return the sine."
        }
      ]
    },
    {
      "name": "tan",
      "summary": "Return the tangent of the parameter.",
      "parameters": [
        {
          "name": "angle",
          "summary": "Specify the quantity, in radians, of which to return the tangent."
        }
      ]
    },
    {
      "name": "abs",
      "summary": "Return the absolute value of the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value of which to return the absolute."
        }
      ]
    },
    {
      "name": "ceil",
      "summary": "Find the nearest integer that is greater than or equal to the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value to evaluate."
        }
      ]
    },
    {
      "name": "clamp",
      "summary": "Constrain a value to lie between two further values.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value to constrain."
        },
        {
          "name": "minVal",
          "summary": "Specify the lower end of the range into which to constrain x."
        },
        {
          "name": "maxVal",
          "summary": "Specify the upper end of the range into which to constrain x."
        }
      ]
    },
    {
      "name": "exp",
      "summary": "Return the natural exponentiation of the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value to exponentiate."
        }
      ]
    },
    {
      "name": "exp2",
      "summary": "Return 2 raised to the power of the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value of the power to which 2 will be raised."
        }
      ]
    },
    {
      "name": "floor",
      "summary": "Find the nearest integer less than or equal to the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value to evaluate."
        }
      ]
    },
    {
      "name": "fract",
      "summary": "Compute the fractional part of the argument.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value to evaluate."
        }
      ]
    },
    {
      "name": "inversesqrt",
      "summary": "Return the inverse of the square root of the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value of which to take the inverse of the square root."
        }
      ]
    },
    {
      "name": "log",
      "summary": "Return the natural logarithm of the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value of which to take the natural logarithm."
        }
      ]
    },
    {
      "name": "log2",
      "summary": "Return the base 2 logarithm of the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value of which to take the base 2 logarithm."
        }
      ]
    },
    {
      "name": "max",
      "summary": "Return the greater of two values.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the first value to compare."
        },
        {
          "name": "y",
          "summary": "Specify the second value to compare."
        }
      ]
    },
    {
      "name": "min",
      "summary": "Return the lesser of two values.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the first value to compare."
        },
        {
          "name": "y",
          "summary": "Specify the second value to compare."
        }
      ]
    },
    {
      "name": "mix",
      "summary": "Linearly interpolate between two values.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the start of the range in which to interpolate."
        },
        {
          "name": "y",
          "summary": "Specify the end of the range in which to interpolate."
        },
        {
          "name": "a",
          "summary": "Specify the value to use to interpolate between x and y."
        }
      ]
    },
    {
      "name": "mod",
      "summary": "Compute value of one parameter modulo another.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value to evaluate."
        },
        {
          "name": "y",
          "summary": "Specify the value by which to perform the modulo."
        }
      ]
    },
    {
      "name": "pow",
      "summary": "Return the value of the first parameter raised to the power of the second.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value to raise to the power y."
        },
        {
          "name": "y",
          "summary": "Specify the power to which to raise x."
        }
      ]
    },
    {
      "name": "sign",
      "summary": "Extract the sign of the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value from which to extract the sign."
        }
      ]
    },
    {
      "name": "smoothstep",
      "summary": "Perform Hermite interpolation between two values.",
      "parameters": [
        {
          "name": "edge0",
          "summary": "Specifies the value of the lower edge of the Hermite function."
        },
        {
          "name": "edge1",
          "summary": "Specifies the value of the upper edge of the Hermite function."
        },
        {
          "name": "x",
          "summary": "Specifies the source value for interpolation."
        }
      ]
    },
    {
      "name": "sqrt",
      "summary": "Return the square root of the parameter.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specify the value of which to take the square root."
        }
      ]
    },
    {
      "name": "step",
      "summary": "Generate a step function by comparing two values.",
      "parameters": [
        {
          "name": "edge",
          "summary": "Specifies the location of the edge of the step function."
        },
        {
          "name": "x",
          "summary": "Specify the value to be used to generate the step function."
        }
      ]
    },
    {
      "name": "cross",
      "summary": "Calculate the cross product of two vectors.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the first of two vectors."
        },
        {
          "name": "y",
          "summary": "Specifies the second of two vectors."
        }
      ]
    },
    {
      "name": "distance",
      "summary": "Calculate the distance between two points.",
      "parameters": [
        {
          "name": "p0",
          "summary": "Specifies the first of two points."
        },
        {
          "name": "p1",
          "summary": "Specifies the second of two points."
        }
      ]
    },
    {
      "name": "dot",
      "summary": "Calculate the dot product of two vectors.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the first of two vectors."
        },
        {
          "name": "y",
          "summary": "Specifies the second of two vectors."
        }
      ]
    },
    {
      "name": "equal",
      "summary": "Perform a component-wise equal-to comparison of two vectors.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the first vector to be used in the comparison operation."
        },
        {
          "name": "y",
          "summary": "Specifies the second vector to be used in the comparison operation."
        }
      ]
    },
    {
      "name": "faceforward",
      "summary": "Return a vector pointing in the same direction as another.",
      "parameters": [
        {
          "name": "N",
          "summary": "Specifies the vector to orient."
        },
        {
          "name": "I",
          "summary": "Specifies the incident vector."
        },
        {
          "name": "Nref",
          "summary": "Specifies the reference vector."
        }
      ]
    },
    {
      "name": "length",
      "summary": "Calculate the length of a vector.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies a vector of which to calculate the length."
        }
      ]
    },
    {
      "name": "normalize",
      "summary": "Calculate the normalize product of two vectors.",
      "parameters": [
        {
          "name": "v",
          "summary": "Specifies the vector to normalize."
        }
      ]
    },
    {
      "name": "notEqual",
      "summary": "Perform a component-wise not-equal-to comparison of two vectors.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the first vector to be used in the comparison operation."
        },
        {
          "name": "y",
          "summary": "Specifies the second vector to be used in the comparison operation."
        }
      ]
    },
    {
      "name": "reflect",
      "summary": "Calculate the reflection direction for an incident vector.",
      "parameters": [
        {
          "name": "I",
          "summary": "Specifies the incident vector."
        },
        {
          "name": "N",
          "summary": "Specifies the normal vector."
        }
      ]
    },
    {
      "name": "refract",
      "summary": "Calculate the refraction direction for an incident vector.",
      "parameters": [
        {
          "name": "I",
          "summary": "Specifies the incident vector."
        },
        {
          "name": "N",
          "summary": "Specifies the normal vector."
        },
        {
          "name": "eta",
          "summary": "Specifies the ratio of indices of refraction."
        }
      ]
    },
    {
      "name": "all",
      "summary": "Check whether all elements of a boolean vector are true.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the vector to be tested for truth."
        }
      ]
    },
    {
      "name": "any",
      "summary": "Check whether any element of a boolean vector is true.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the vector to be tested for truth."
        }
      ]
    },
    {
      "name": "greaterThan",
      "summary": "Perform a component-wise greater-than comparison of two vectors.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the first vector to be used in the comparison operation."
        },
        {
          "name": "y",
          "summary": "Specifies the second vector to be used in the comparison operation."
        }
      ]
    },
    {
      "name": "greaterThanEqual",
      "summary": "Perform a component-wise greater-than-or-equal comparison of two vectors.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the first vector to be used in the comparison operation."
        },
        {
          "name": "y",
          "summary": "Specifies the second vector to be used in the comparison operation."
        }
      ]
    },
    {
      "name": "lessThan",
      "summary": "Perform a component-wise less-than comparison of two vectors.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the first vector to be used in the comparison operation."
        },
        {
          "name": "y",
          "summary": "Specifies the second vector to be used in the comparison operation."
        }
      ]
    },
    {
      "name": "lessThanEqual",
      "summary": "Perform a component-wise less-than-or-equal comparison of two vectors.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the first vector to be used in the comparison operation."
        },
        {
          "name": "y",
          "summary": "Specifies the second vector to be used in the comparison operation."
        }
      ]
    },
    {
      "name": "not",
      "summary": "Logically invert a boolean vector.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the vector to be inverted."
        }
      ]
    },
    {
      "name": "texture2D",
      "summary": "Retrieves texels from a texture.",
      "parameters": [
        {
          "name": "sampler",
          "summary": "Specifies the sampler to which the texture from which texels will be retrieved is bound."
        },
        {
          "name": "coord",
          "summary": "Specifies the texture coordinates at which texture will be sampled."
        },
        {
          "name": "bias",
          "summary": "Specifies an optional bias to be applied during level-of-detail computation."
        }
      ]
    },
    {
      "name": "texture2DProj",
      "summary": "Perform a texture lookup with projection.",
      "parameters": [
        {
          "name": "sampler",
          "summary": "Specifies the sampler to which the texture from which texels will be retrieved is bound."
        },
        {
          "name": "coord",
          "summary": "Specifies the texture coordinates at which texture will be sampled."
        },
        {
          "name": "bias",
          "summary": "Specifies an optional bias to be applied during level-of-detail computation."
        }
      ]
    },
    {
      "name": "texture2DLod",
      "summary": "Perform a texture lookup with explicit level-of-detail.",
      "parameters": [
        {
          "name": "sampler",
          "summary": "Specifies the sampler to which the texture from which texels will be retrieved is bound."
        },
        {
          "name": "coord",
          "summary": "Specifies the texture coordinates at which texture will be sampled."
        },
        {
          "name": "lod",
          "summary": "Specifies the explicit level-of-detail."
        }
      ]
    },
    {
      "name": "texture2DProjLod",
      "summary": "Perform a texture lookup with projection and explicit level-of-detail.",
      "parameters": [
        {
          "name": "sampler",
          "summary": "Specifies the sampler to which the texture from which texels will be retrieved is bound."
        },
        {
          "name": "coord",
          "summary": "Specifies the texture coordinates at which texture will be sampled."
        },
        {
          "name": "lod",
          "summary": "Specifies the explicit level-of-detail from which to fetch texels."
        }
      ]
    },
    {
      "name": "textureCube",
      "summary": "Retrieves texels from a texture.",
      "parameters": [
        {
          "name": "sampler",
          "summary": "Specifies the sampler to which the texture from which texels will be retrieved is bound."
        },
        {
          "name": "coord",
          "summary": "Specifies the texture coordinates at which texture will be sampled."
        },
        {
          "name": "bias",
          "summary": "Specifies an optional bias to be applied during level-of-detail computation."
        }
      ]
    },
    {
      "name": "textureCubeLod",
      "summary": "Perform a texture lookup with explicit level-of-detail.",
      "parameters": [
        {
          "name": "sampler",
          "summary": "Specifies the sampler to which the texture from which texels will be retrieved is bound."
        },
        {
          "name": "coord",
          "summary": "Specifies the texture coordinates at which texture will be sampled."
        },
        {
          "name": "lod",
          "summary": "Specifies the explicit level-of-detail."
        }
      ]
    },
    {
      "name": "matrixCompMult",
      "summary": "Perform a component-wise multiplication of two matrices.",
      "parameters": [
        {
          "name": "x",
          "summary": "Specifies the first matrix multiplicand."
        },
        {
          "name": "y",
          "summary": "Specifies the second matrix multiplicand."
        }
      ]
    },
    {
      "name": "fwidth",
      "parameters": [
        {
          "name": "p"
        }
      ],
      "stage": "fragment",
      "extension": "GL_OES_standard_derivatives"
    },
    {
      "name": "dFdx",
      "parameters": [
        {
          "name": "p"
        }
      ],
      "stage": "fragment",
      "extension": "GL_OES_standard_derivatives"
    },
    {
      "name": "dFdy",
      "parameters": [
        {
          "name": "p"
        }
      ],
      "stage": "fragment",
      "extension": "GL_OES_standard_derivatives"
    },
    {
      "name": "texture2DLodEXT",
      "parameters": [
        {
          "name": "sampler"
        },
        {
          "name": "coord"
        },
        {
          "name": "lod"
        }
      ],
      "stage": "fragment",
      "extension": "GL_EXT_shader_texture_lod"
    },
    {
      "name": "texture2DProjLodEXT",
      "parameters": [
        {
          "name": "sampler"
        },
        {
          "name": "coord"
        },
        {
          "name": "lod"
        }
      ],
      "stage": "fragment",
      "extension": "GL_EXT_shader_texture_lod"
    },
    {
      "name": "texture2DProjLodEXT",
      "parameters": [
        {
          "name": "sampler"
        },
        {
          "name": "coord"
        },
        {
          "name": "lod"
        }
      ],
      "stage": "fragment",
      "extension": "GL_EXT_shader_texture_lod"
    },
    {
      "name": "textureCubeLodEXT",
      "parameters": [
        {
          "name": "sampler"
        },
        {
          "name": "coord"
        },
        {
          "name": "lod"
        }
      ],
      "stage": "fragment",
      "extension": "GL_EXT_shader_texture_lod"
    },
    {
      "name": "texture2DGradEXT",
      "parameters": [
        {
          "name": "sampler"
        },
        {
          "name": "P"
        },
        {
          "name": "dPdx"
        },
        {
          "name": "dPdy"
        }
      ],
      "stage": "fragment",
      "extension": "GL_EXT_shader_texture_lod"
    },
    {
      "name": "texture2DProjGradEXT",
      "parameters": [
        {
          "name": "sampler"
        },
        {
          "name": "P"
        },
        {
          "name": "dPdx"
        },
        {
          "name": "dPdy"
        }
      ],
      "stage": "fragment",
      "extension": "GL_EXT_shader_texture_lod"
    },
    {
      "name": "texture2DProjGradEXT",
      "parameters": [
        {
          "name": "sampler"
        },
        {
          "name": "P"
        },
        {
          "name": "dPdx"
        },
        {
          "name": "dPdy"
        }
      ],
      "stage": "fragment",
      "extension": "GL_EXT_shader_texture_lod"
    },
    {
      "name": "textureCubeGradEXT",
      "parameters": [
        {
          "name": "sampler"
        },
        {
          "name": "P"
        },
        {
          "name": "dPdx"
        },
        {
          "name": "dPdy"
        }
      ],
      "stage": "fragment",
      "extension": "GL_EXT_shader_texture_lod"
    }
  ]
}
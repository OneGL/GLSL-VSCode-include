//trigonometry
genType acos(genType x);
genType acosh(genType x);
genType asin(genType x);
genType asinh(genType x);
genType atan(genType y, genType x);
genType atan(genType y_over_x);
genType atanh(genType x);
genType cos(genType angle);
genType cosh(genType x);
genType degrees(genType radians);
genType radians(genType degrees);
genType sin(genType angle);
genType sinh(genType x);
genType tan(genType angle);
genType tanh(genType x);

//mathematics
genType abs(genType x);
genIType abs(genIType x);
genType ceil(genType x);
genType clamp(genType x, genType minVal, genType maxVal);
genType clamp(genType x, float minVal, float maxVal);
genIType clamp(genIType x, genIType minVal, genIType maxVal);
genIType clamp(genIType x, int minVal, int maxVal);
genUType clamp(genUType x, genUType minVal, genUType maxVal);
genUType clamp(genUType x, uint minVal, uint maxVal);
genType dFdx(genType p);
genType dFdy(genType p);
genType exp(genType x);
genType exp2(genType x);
genType floor(genType x);
genType fract(genType x);
genType fwidth(genType p);
genType inversesqrt(genType x);
genBType isinf(genType x);
genBType isnan(genType x);
genType log(genType x);
genType log2(genType x);
genType max(genType x, genType y);
genType max(genType x, float y);
genIType max(genIType x, genIType y);
genIType max(genIType x, int y);
genUType max(genUType x, genUType y);
genUType max(genUType x, uint y);
genType min(genType x, genType y);
genType min(genType x, float y);
genIType min(genIType x, genIType y);
genIType min(genIType x, int y);
genUType min(genUType x, genUType y);
genUType min(genUType x, uint y);
genType mix(genType x, genType y, genType a);
genType mix(genType x, genType y, float a);
genType mix(genType x, genType y, genBType a);
genType mod(genType x, float y);
genType mod(genType x, genType y);
genType modf(genType x, out genType i);
genType pow(genType x, genType y);
genType round(genType x);
genType roundEven(genType x);
genType sign(genType x);
genIType sign(genIType x);
genType smoothstep(genType edge0, genType edge1, genType x);
genType smoothstep(float edge0, float edge1, genType x);
genType sqrt(genType x);
genType step(genType edge, genType x);
genType step(float edge, genType x);
genType trunc(genType x);

//floating point
genIType floatBitsToInt(genType x);
genUType floatBitsToUint(genType x);
genType intBitsToFloat(genIType x);
genType uintBitsToFloat(genUType x);
uint packHalf2x16(vec2 v);
uint packUnorm2x16(vec2 v);
uint packSnorm2x16(vec2 v);
vec2 unpackHalf2x16(uint v);
vec2 unpackUnorm2x16(uint p);
vec2 unpackSnorm2x16(uint p);

//vector
vec3 cross(vec3 x, vec3 y);
float distance(genType p0, genType p1);
float dot(genType x, genType y);
bvec equal(vec x, vec y);
bvec equal(bvec x, bvec y);
bvec equal(ivec x, ivec y);
bvec equal(uvec x, uvec y);
genType faceforward(genType N, genType I, genType Nref);
float length(genType x);
genType normalize(genType v);
bvec notEqual(vec x, vec y);
bvec notEqual(ivec x, ivec y);
bvec notEqual(bvec x, bvec y);
bvec notEqual(uvec x, uvec y);
genType reflect(genType I, genType N);
genType refract(genType I, genType N, float eta);

//component comparison
bool all(bvec x);
bool any(bvec x);
bvec greaterThan(vec x, vec y);
bvec greaterThan(ivec x, ivec y);
bvec greaterThan(uvec x, uvec y);
bvec greaterThanEqual(vec x, vec y);
bvec greaterThanEqual(ivec x, ivec y);
bvec greaterThanEqual(uvec x, uvec y);
bvec lessThan(vec x, vec y);
bvec lessThan(ivec x, ivec y);
bvec lessThan(uvec x, uvec y);
bvec lessThanEqual(vec x, vec y);
bvec lessThanEqual(ivec x, ivec y);
bvec lessThanEqual(uvec x, uvec y);
bvec not(bvec x);

//texture sampling
gvec4 texelFetch(gsampler2D sampler, ivec2 P, int lod);
gvec4 texelFetch(gsampler3D sampler, ivec3 P, int lod);
gvec4 texelFetch(gsampler2DArray sampler, ivec3 P, int lod);
gvec4 texelFetchOffset(gsampler2D sampler, ivec2 P, int lod, ivec2 offset);
gvec4 texelFetchOffset(gsampler3D sampler, ivec3 P, int lod, ivec3 offset);
gvec4 texelFetchOffset(gsampler2DArray sampler, ivec3 P, int lod, ivec2 offset);
gvec4 texture(gsampler2D sampler, vec2 P);
gvec4 texture(gsampler2D sampler, vec2 P, float bias);
gvec4 texture(gsampler3D sampler, vec3 P);
gvec4 texture(gsampler3D sampler, vec3 P, float bias);
gvec4 texture(gsamplerCube sampler, vec3 P);
gvec4 texture(gsamplerCube sampler, vec3 P, float bias);
float texture(sampler2DShadow sampler, vec3 P);
float texture(sampler2DShadow sampler, vec3 P, float bias);
float texture(samplerCubeShadow sampler, vec4 P);
float texture(samplerCubeShadow sampler, vec4 P, float bias);
gvec4 texture(gsampler2DArray sampler, vec3 P);
gvec4 texture(gsampler2DArray sampler, vec3 P, float bias);
float texture(sampler2DArrayShadow sampler, vec4 P);
gvec4 textureGrad(gsampler2D sampler, vec2 P, vec2 dPdx, vec2 dPdy);
gvec4 textureGrad(gsampler3D sampler, vec3 P, vec3 dPdx, vec3 dPdy);
gvec4 textureGrad(gsamplerCube sampler, vec3 P, vec3 dPdx, vec3 dPdy);
float textureGrad(sampler2DShadow sampler, vec3 P, vec2 dPdx, vec2 dPdy);
float textureGrad(samplerCubeShadow sampler, vec4 P, vec3 dPdx, vec3 dPdy);
gvec4 textureGrad(gsampler2DArray sampler, vec3 P, vec2 dPdx, vec2 dPdy);
float textureGrad(sampler2DArrayShadow sampler, vec4 P, vec2 dPdx, vec2 dPdy);
gvec4 textureGradOffset(gsampler2D sampler, vec2 P, vec2 dPdx, vec2 dPdy, ivec2 offset);
gvec4 textureGradOffset(gsampler3D sampler, vec3 P, vec3 dPdx, vec3 dPdy, ivec3 offset);
float textureGradOffset(sampler2DShadow sampler, vec3 P, vec2 dPdx, vec2 dPdy, ivec2 offset);
gvec4 textureGradOffset(gsampler2DArray sampler, vec3 P, vec2 dPdx, vec2 dPdy, ivec2 offset);
float textureGradOffset(sampler2DArrayShadow sampler, vec4 P, vec2 dPdx, vec2 dPdy, ivec2 offset);
gvec4 textureLod(gsampler2D sampler, vec2 P, float lod);
gvec4 textureLod(gsampler3D sampler, vec3 P, float lod);
gvec4 textureLod(gsamplerCube sampler, vec3 P, float lod);
float textureLod(sampler2DShadow sampler, vec3 P, float lod);
gvec4 textureLod(gsampler2DArray sampler, vec3 P, float lod);
gvec4 textureLodOffset(gsampler2D sampler, vec2 P, float lod, ivec2 offset);
gvec4 textureLodOffset(gsampler3D sampler, vec3 P, float lod, ivec3 offset);
float textureLodOffset(sampler2DShadow sampler, vec3 P, float lod, ivec2 offset);
gvec4 textureLodOffset(gsampler2DArray sampler, vec3 P, float lod, ivec2 offset);
gvec4 textureOffset(gsampler2D sampler, vec2 P, ivec2 offset);
gvec4 textureOffset(gsampler2D sampler, vec2 P, ivec2 offset, float bias);
gvec4 textureOffset(gsampler3D sampler, vec3 P, ivec3 offset);
gvec4 textureOffset(gsampler3D sampler, vec3 P, ivec3 offset, float bias);
float textureOffset(sampler2DShadow sampler, vec3 P, ivec2 offset);
float textureOffset(sampler2DShadow sampler, vec3 P, ivec2 offset, float bias);
gvec4 textureOffset(gsampler2DArray sampler, vec3 P, ivec2 offset);
gvec4 textureOffset(gsampler2DArray sampler, vec3 P, ivec2 offset, float bias);
gvec4 textureProj(gsampler2D sampler, vec3 P);
gvec4 textureProj(gsampler2D sampler, vec3 P, float bias);
gvec4 textureProj(gsampler2D sampler, vec4 P);
gvec4 textureProj(gsampler2D sampler, vec4 P, float bias);
gvec4 textureProj(gsampler3D sampler, vec4 P);
gvec4 textureProj(gsampler3D sampler, vec4 P, float bias);
float textureProj(sampler2DShadow sampler, vec4 P);
float textureProj(sampler2DShadow sampler, vec4 P, float bias);
gvec4 textureProjGrad(gsampler2D sampler, vec3 P, vec2 dPdx, vec2 dPdy);
gvec4 textureProjGrad(gsampler2D sampler, vec4 P, vec2 dPdx, vec2 dPdy);
gvec4 textureProjGrad(gsampler3D sampler, vec4 P, vec3 dPdx, vec3 dPdy);
float textureProjGrad(sampler2DShadow sampler, vec4 P, vec2 dPdx, vec2 dPdy);
gvec4 textureProjGradOffset(gsampler2D sampler, vec3 P, vec2 dPdx, vec2 dPdy, ivec2 offset);
gvec4 textureProjGradOffset(gsampler2D sampler, vec4 P, vec2 dPdx, vec2 dPdy, ivec2 offset);
gvec4 textureProjGradOffset(gsampler3D sampler, vec4 P, vec3 dPdx, vec3 dPdy, ivec3 offset);
float textureProjGradOffset(sampler2DShadow sampler, vec4 P, vec2 dPdx, vec2 dPdy, ivec2 offset);
gvec4 textureProjLod(gsampler2D sampler, vec3 P, float lod);
gvec4 textureProjLod(gsampler2D sampler, vec4 P, float lod);
gvec4 textureProjLod(gsampler3D sampler, vec4 P, float lod);
float textureProjLod(sampler2DShadow sampler, vec4 P, float lod);
gvec4 textureProjLodOffset(gsampler2D sampler, vec3 P, float lod, ivec2 offset);
gvec4 textureProjLodOffset(gsampler2D sampler, vec4 P, float lod, ivec2 offset);
gvec4 textureProjLodOffset(gsampler3D sampler, vec4 P, float lod, ivec3 offset);
float textureProjLodOffset(sampler2DShadow sampler, vec4 P, float lod, ivec2 offset);
gvec4 textureProjOffset(gsampler2D sampler, vec3 P, ivec2 offset);
gvec4 textureProjOffset(gsampler2D sampler, vec3 P, ivec2 offset, float bias);
gvec4 textureProjOffset(gsampler2D sampler, vec4 P, ivec2 offset);
gvec4 textureProjOffset(gsampler2D sampler, vec4 P, ivec2 offset, float bias);
gvec4 textureProjOffset(gsampler3D sampler, vec4 P, ivec3 offset);
gvec4 textureProjOffset(gsampler3D sampler, vec4 P, ivec3 offset, float bias);
float textureProjOffset(sampler2DShadow sampler, vec4 P, ivec2 offset);
float textureProjOffset(sampler2DShadow sampler, vec4 P, ivec2 offset, float bias);
ivec2 textureSize(gsampler2D sampler, int lod);
ivec3 textureSize(gsampler3D sampler, int lod);
ivec2 textureSize(gsamplerCube sampler, int lod);
ivec2 textureSize(sampler2DShadow sampler, int lod);
ivec2 textureSize(samplerCubeShadow sampler, int lod);
ivec3 textureSize(gsampler2DArray sampler, int lod);
ivec3 textureSize(sampler2DArrayShadow sampler, int lod);

//matrix
float determinant(mat2 m);
float determinant(mat3 m);
float determinant(mat4 m);
mat2 inverse(mat2 m);
mat3 inverse(mat3 m);
mat4 inverse(mat4 m);
mat matrixCompMult(mat x, mat y);
mat2 outerProduct(vec2 c, vec2 r);
mat3 outerProduct(vec3 c, vec3 r);
mat4 outerProduct(vec4 c, vec4 r);
mat2x3 outerProduct(vec3 c, vec2 r);
mat3x2 outerProduct(vec2 c, vec3 r);
mat2x4 outerProduct(vec4 c, vec2 r);
mat4x2 outerProduct(vec2 c, vec4 r);
mat3x4 outerProduct(vec4 c, vec3 r);
mat4x3 outerProduct(vec3 c, vec4 r);
mat2 transpose(mat2 m);
mat3 transpose(mat3 m);
mat4 transpose(mat4 m);
mat2x3 transpose(mat3x2 m);
mat2x4 transpose(mat4x2 m);
mat3x2 transpose(mat2x3 m);
mat3x4 transpose(mat4x3 m);
mat4x2 transpose(mat2x4 m);
mat4x3 transpose(mat3x4 m);
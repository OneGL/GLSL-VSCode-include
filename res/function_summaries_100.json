{
  "functions": [
    {
      "name": "acos",
      "summary": "return the arccosine of the parameter"
    },
    {
      "name": "asin",
      "summary": "return the arcsine of the parameter"
    },
    {
      "name": "atan",
      "summary": "return the arc-tangent of the parameters"
    },
    {
      "name": "cos",
      "summary": "return the cosine of the parameter"
    },
    {
      "name": "degrees",
      "summary": "convert a quantity in radians to degrees"
    },
    {
      "name": "radians",
      "summary": "convert a quantity in degrees to radians"
    },
    {
      "name": "sin",
      "summary": "return the sine of the parameter"
    },
    {
      "name": "tan",
      "summary": "return the tangent of the parameter"
    },
    {
      "name": "abs",
      "summary": "return the absolute value of the parameter"
    },
    {
      "name": "ceil",
      "summary": "find the nearest integer that is greater than or equal to the parameter"
    },
    {
      "name": "clamp",
      "summary": "constrain a value to lie between two further values"
    },
    {
      "name": "exp",
      "summary": "return the natural exponentiation of the parameter"
    },
    {
      "name": "exp2",
      "summary": "return 2 raised to the power of the parameter"
    },
    {
      "name": "floor",
      "summary": "ind the nearest integer less than or equal to the parameter"
    },
    {
      "name": "fract",
      "summary": "compute the fractional part of the argument"
    },
    {
      "name": "inversesqrt",
      "summary": "return the inverse of the square root of the parameter"
    },
    {
      "name": "log",
      "summary": "return the natural logarithm of the parameter"
    },
    {
      "name": "log2",
      "summary": "return the base 2 logarithm of the parameter"
    },
    {
      "name": "max",
      "summary": "return the greater of two values"
    },
    {
      "name": "min",
      "summary": "return the lesser of two values"
    },
    {
      "name": "mix",
      "summary": "linearly interpolate between two values"
    },
    {
      "name": "mod",
      "summary": "compute value of one parameter modulo another"
    },
    {
      "name": "pow",
      "summary": "return the value of the first parameter raised to the power of the second"
    },
    {
      "name": "sign",
      "summary": "extract the sign of the parameter"
    },
    {
      "name": "smoothstep",
      "summary": "perform Hermite interpolation between two values"
    },
    {
      "name": "sqrt",
      "summary": "return the square root of the parameter"
    },
    {
      "name": "step",
      "summary": "generate a step function by comparing two values"
    },
    {
      "name": "cross",
      "summary": "calculate the cross product of two vectors"
    },
    {
      "name": "distance",
      "summary": "calculate the distance between two points"
    },
    {
      "name": "dot",
      "summary": "calculate the dot product of two vectors"
    },
    {
      "name": "equal",
      "summary": "perform a component-wise equal-to comparison of two vectors"
    },
    {
      "name": "faceforward",
      "summary": "return a vector pointing in the same direction as another"
    },
    {
      "name": "length",
      "summary": "calculate the length of a vector"
    },
    {
      "name": "normalize",
      "summary": "calculate the normalize product of two vectors"
    },
    {
      "name": "notEqual",
      "summary": "perform a component-wise not-equal-to comparison of two vectors"
    },
    {
      "name": "reflect",
      "summary": "calculate the reflection direction for an incident vector"
    },
    {
      "name": "refract",
      "summary": "calculate the refraction direction for an incident vector"
    },
    {
      "name": "all",
      "summary": "check whether all elements of a boolean vector are true"
    },
    {
      "name": "any",
      "summary": "check whether any element of a boolean vector is true"
    },
    {
      "name": "greaterThan",
      "summary": "perform a component-wise greater-than comparison of two vectors"
    },
    {
      "name": "greaterThanEqual",
      "summary": "perform a component-wise greater-than-or-equal comparison of two vectors"
    },
    {
      "name": "lessThan",
      "summary": "perform a component-wise less-than comparison of two vectors"
    },
    {
      "name": "lessThanEqual",
      "summary": "perform a component-wise less-than-or-equal comparison of two vectors"
    },
    {
      "name": "not",
      "summary": "logically invert a boolean vector"
    },
    {
      "name": "texture2D",
      "customSummary": "retrieves texels from a texture"
    },
    {
      "name": "texture2DProj",
      "customSummary": "perform a texture lookup with projection"
    },
    {
      "name": "texture2DLod",
      "customSummary": "perform a texture lookup with explicit level-of-detail"
    },
    {
      "name": "texture2DProjLod",
      "customSummary": "perform a texture lookup with projection and explicit level-of-detail"
    },
    {
      "name": "textureCube",
      "customSummary": "retrieves texels from a texture"
    },
    {
      "name": "textureCubeLod",
      "customSummary": "perform a texture lookup with explicit level-of-detail"
    },
    {
      "name": "matrixCompMult",
      "summary": "perform a component-wise multiplication of two matrices"
    }
  ]
}